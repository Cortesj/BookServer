# ***********************************
# |docname| - configuration for nginx
# ***********************************
# This sets up nginx to run both the old and new server together.
#
# It was partially taken from the `gunicorn docs <https://docs.gunicorn.org/en/stable/deploy.html#nginx-configuration>`_.

# `worker_processes <https://nginx.org/en/docs/ngx_core_module.html#worker_processes>`_: Define the number of worker processes. TODO: Why set this to 1, instead of the number of available CPU cores? Perhaps because we let gunicorn / uwsgi so this instead; then nginx doesn't have much work to do. Another option: ``worker_processes auto;``.
worker_processes 1;

# `user <https://nginx.org/en/docs/ngx_core_module.html#user>`_: Set the user and group used by the worker processes. Select a user with restricted privileges for better security.
user www-data www-data;

# `error_log <https://nginx.org/en/docs/ngx_core_module.html#error_log>`_: configure logging.
error_log  /var/log/nginx/error.log warn;

# `pid <https://nginx.org/en/docs/ngx_core_module.html#pid>`_: define a file that will store the process ID of the main process. TODO: why? Do we need/use this somewhere?
pid /var/run/nginx.pid;

# `events <https://nginx.org/en/docs/ngx_core_module.html#events>`_: specify connection processing parameters.
events {
  # `worker_connections <https://nginx.org/en/docs/ngx_core_module.html#worker_connections>`_: set the maximum number of simultaneous connections that can be opened by a worker process. TODO: will we have websockets, and therefore need more connections?
  worker_connections 1024;
  # `accept_mutex <https://nginx.org/en/docs/ngx_core_module.html#accept_mutex>`_: enable to have worker processes take turns when handling connections. Set this to 'on' if ``worker_processes`` > 1.
  accept_mutex off;
  # TODO: the `connection processing methods <https://nginx.org/en/docs/events.html>`_ page states that nginx will normally select the most efficient method. However, gnuicorn's template says to add ``use epoll;`` for Linux 2.6+, or ``use kqueue;`` for FreeBSD, OSX. Is this really necessary?
}

# `http <https://nginx.org/en/docs/http/ngx_http_core_module.html#http>`: configure HTTP server directives. TODO: for testing only. For production, use https only.
http {
  # `include <https://nginx.org/en/docs/ngx_core_module.html#include>`_: Inlcude another file. In this case, define standard MIME types.
  include mime.types;
  # `default_type <https://nginx.org/en/docs/http/ngx_http_core_module.html#default_type>`_: Define the default MIME type of a response. Use this in case we can't determine a type.
  default_type application/octet-stream;
  access_log /var/log/nginx/access.log combined;
  sendfile on;

  upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    server unix:/tmp/gunicorn.sock fail_timeout=0;

    # for a TCP configuration
    # server 192.168.0.7:8000 fail_timeout=0;
  }

  server {
    # if no Host match, close the connection to prevent host spoofing
    listen 80 default_server;
    return 444;
  }

  server {
    # use 'listen 80 deferred;' for Linux
    # use 'listen 80 accept_filter=httpready;' for FreeBSD
    listen 80;
    client_max_body_size 4G;

    # set the correct host(s) for your site
    server_name example.com www.example.com;

    keepalive_timeout 5;

    # path for static files
    root /path/to/app/current/public;

    # Route paths from ``/`` to static files, then to web2py. See `location <https://nginx.org/en/docs/http/ngx_http_core_module.html#location>`_.
    location / {
      # checks for static file, if not found proxy to app
      try_files $uri @proxy_to_app;
    }

    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://app_server;
    }

    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root /path/to/app/current/public;
    }
  }
}





server {
    listen  80 default_server;
    include /etc/nginx/default.d/*.conf;

    # Rewrite the path to static files.
    # root supplies the uptree path the match gets appended to the path specified
    # by the root directive
    location ~* /(\w+)/static/ {
        root /srv/web2py/applications/;
    }

    # alias allows us to completely rewrite the static path
    location ~* /(\w+)/books/(published|draft)/(\w+)/(_static|_images|images)/(.*)$ {
        alias /srv/web2py/applications/$1/books/$3/$2/$3/$4/$5;
    }

    location / {
        include uwsgi_params;
        uwsgi_pass unix:/run/uwsgi/web2py.sock;
        uwsgi_param	DBURL	postgresql://runestone:passworda@localhost/runestone;
        uwsgi_param     WEB2PY_CONFIG development;
    }
}
